// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// statusMessage
model User {
  id                      String     @id @default(uuid())
  email                   String     @unique
  name                    String     @unique
  password                String?
  token                   String?
  writtenPosts            Post[]     @relation("writtenPosts")
  profile_pic_url         String?
  gender                  UserGender @default(MALE)
  taggedInPosts           PostTag[]  @relation("_UsersPostsTag")
  biography               String?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime?  @updatedAt
  specificAudienceInPosts Post[]     @relation("_UsersPostsSpecificAudince")
  followers               User[]     @relation(name: "FollowRelation")
  following               User[]     @relation(name: "FollowRelation")
  likePosts               Post[]     @relation("UsersPostsLike")
  postComments            Comment[]
}

model Post {
  id                      String           @id @default(uuid())
  content                 String?
  audience                PostAudienceEnum @default(PUBLIC)
  specificAudienceFriends User[]           @relation("_UsersPostsSpecificAudince")
  media                   PostMedia[]
  taggedFriends           PostTag[]
  likes                   User[]           @relation("UsersPostsLike")
  published               Boolean          @default(false)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  author                  User             @relation("writtenPosts", fields: [authorId], references: [id], onDelete: Cascade)
  authorId                String
  comments                Comment[]
}

model PostMedia {
  id        String        @id @default(uuid())
  mediaFile String
  longitude Int?
  latitude  Int?
  position  MediaPosition @default(IMAGE)
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

model PostTag {
  id            String  @id @default(uuid())
  x_coordinates Float
  y_coordinates Float
  Post          Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String?
  taggedUsers   User[]  @relation("_UsersPostsTag")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

// model Follower {
//   id         String   @id @default(uuid())
//   user       User     @relation(name: "UserFollowing", fields: [userId], references: [id], onDelete: Cascade)
//   userId     String
//   follower   User     @relation(name: "UserFollower", fields: [followerId], references: [id], onDelete: Cascade)
//   followerId String
//   createdAt  DateTime @default(now())
// }

enum UserGender {
  MALE
  FEMALE
}

enum PostAudienceEnum {
  PUBLIC
  FRIENDS
  ONLY_ME
  SPECIFIC
}

enum MediaPosition {
  IMAGE
  VIDEO
}
