generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             String     @id @default(uuid())
  email                          String     @unique
  name                           String     @unique
  createdAt                      DateTime   @default(now())
  updatedAt                      DateTime?  @updatedAt
  password                       String?
  token                          String?
  biography                      String?
  profile_pic_url                String?
  gender                         UserGender @default(MALE)
  postComments                   Comment[]
  writtenPosts                   Post[]     @relation("writtenPosts")
  User_B                         User[]     @relation("FollowRelation")
  User_A                         User[]     @relation("FollowRelation")
  likePosts                      Post[]     @relation("UsersPostsLike")
  Post_UsersPostsSpecificAudince Post[]     @relation("UsersPostsSpecificAudince")
  PostTag                        PostTag[]  @relation("UsersPostsTag")
}

model Post {
  published                      Boolean          @default(false)
  authorId                       String
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt
  id                             String           @id @default(uuid())
  audience                       PostAudienceEnum @default(PUBLIC)
  content                        String?
  author                         User             @relation("writtenPosts", fields: [authorId], references: [id], onDelete: Cascade)
  comments                       Comment[]
  media                          PostMedia[]
  taggedFriends                  PostTag[]
  likes                          User[]           @relation("UsersPostsLike")
  User_UsersPostsSpecificAudince User[]           @relation("UsersPostsSpecificAudince")
}

model PostMedia {
  id        String        @id @default(uuid())
  mediaFile String
  longitude Int?
  latitude  Int?
  position  MediaPosition @default(IMAGE)
  postId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostTag {
  id            String  @id @default(uuid())
  x_coordinates Float
  y_coordinates Float
  postId        String?
  Post          Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  User          User[]  @relation("UsersPostsTag")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  userId    String
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserGender {
  MALE
  FEMALE
}

enum PostAudienceEnum {
  PUBLIC
  FRIENDS
  ONLY_ME
  SPECIFIC
}

enum MediaPosition {
  IMAGE
  VIDEO
}
